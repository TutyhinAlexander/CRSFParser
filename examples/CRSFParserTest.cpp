#include <string>
#include "CRSFParser/CRSFParser.h"
#include "Logger/Logger.h"

using namespace DebugTools;
using namespace CRSFAnalyser;

int main()
{
	LoggerParams params;
	params.useTimestamp = false;
	params.logToConsole = true;
	params.fileName = "CRSF";
	params.maxLogFiles = 10;
	Logger::Init(params);
	Logger::Log("Start logging...\n");
	
	CRSFParser parser;
	parser.EnableLogging(true);

	Logger::Log("Test parser:\n");
//																					C8 18 16 D7 5B 9E 2B 08 F8 8B 5F FC E2 17 BF F8 05 C0 7F 21 45 29 02 1C E0 EA
	parser.ParseFCPacket(std::vector<uint8_t> { {0xC8, 0x18, 0x16, 0xD7, 0x5B, 0x9E, 0x2B, 0x08, 0xF8, 0x8B, 0x5F, 0xFC, 0xE2, 0x17, 0xBF, 0xF8, 0x05, 0xC0, 0x7F, 0x21, 0x45, 0x29, 0x02, 0x1C, 0xE0, 0xEA }});
	/*parser.ParseFCPacket(std::vector<uint8_t> { {0xC8, 0x24, 0x2E, 0x48, 0x26, 0xDD, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x21, 0x63, 0x63, 0x63, 0x63, 0x63, 0x98, 0x98, 0xDE, 0x26, 0x74, 0x27, 0xD0}});
	parser.ParseFCPacket(std::vector<uint8_t> { {0xC8, 0x18, 0x16, 0xDA, 0x5B, 0x9E, 0x2B, 0x0E, 0xF8, 0x0B, 0x00, 0x00, 0xE0, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8B}});
	parser.ParseFCPacket(std::vector<uint8_t> { {0xC8, 0x0C, 0x14, 0x68, 0x00, 0x64, 0x05, 0x00, 0x52, 0x00, 0x00, 0x00, 0x00, 0x25}});
	parser.ParseFCPacket(std::vector<uint8_t> { {0xC8, 0x18, 0x16, 0xDA, 0x5B, 0x9E, 0x2B, 0x10, 0x08, 0xF0, 0x5F, 0xFC, 0xE2, 0x17, 0xBF, 0xF8, 0xC5, 0x2F, 0x7E, 0x21, 0x45, 0x29, 0x02, 0x1C, 0xE0, 0x4D}});
	parser.ParseFCPacket(std::vector<uint8_t> { {0xC8, 0x24, 0x2E, 0x48, 0x26, 0xDD, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x21, 0x63, 0x63, 0x63, 0x63, 0x63, 0x98, 0x98, 0xDE, 0x26, 0x74, 0x27, 0xD0}});
	parser.ParseFCPacket(std::vector<uint8_t> { {0xC8, 0x18, 0x16, 0xDA, 0x5B, 0x9E, 0x2B, 0x0E, 0xF8, 0x0B, 0x00, 0x00, 0xE0, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8B}});
	parser.ParseFCPacket(std::vector<uint8_t> { {0xC8, 0x0C, 0x14, 0x68, 0x00, 0x64, 0x05, 0x00, 0x52, 0x00, 0x00, 0x00, 0x00, 0x25}});
	parser.ParseFCPacket(std::vector<uint8_t> { {0xC8, 0x18, 0x16, 0xDA, 0x5B, 0x9E, 0x2B, 0x0E, 0xF8, 0x0B, 0x00, 0x00, 0xE0, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8B}});	
	* */
	parser.LogParserStatistics();
	
	Logger::Log("\n\nTest creating packet:\n");
	CRSFPayloadRCChannelsData channelsData;
	channelsData.chan0 = 1497;
	channelsData.chan1 = 1487;
	channelsData.chan2 = 989;
	channelsData.chan3 = 1525;
	channelsData.chan4 = 1000;
	channelsData.chan5 = 881;
	channelsData.chan6 = 881;
	channelsData.chan7 = 1000;
	channelsData.chan8 = 881;
	channelsData.chan9 = 881;
	channelsData.chan10 = 881;
	channelsData.chan11 = 881;
	channelsData.chan12 = 881;
	channelsData.chan13 = 881;
	channelsData.chan14 = 881;
	channelsData.chan15 = 881;
	
	char printBuff[5];
	std::string packet;	
	std::vector<uint8_t> result;
	parser.CreateCRSF_RCChannelsPacket(CRSFAddresType::FLIGHT_CONTROLLER, channelsData, result);
	for(size_t i = 0; i < result.size(); ++i)
	{
		sprintf(printBuff, "0x%02X, ", result[i]);
		packet.append(printBuff);
	}
	Logger::Log("Packet size = %i\n Data: [ %s]\n", result.size(), packet.c_str());
}
